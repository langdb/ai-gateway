name: Build AI Gateway

on:
  push:
    tags:
      - 'v*'

  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

concurrency:
  group: main
  cancel-in-progress: true
permissions:
  id-token: write # This is required for requesting the JWT
  contents: write # This is required for actions/checkout

jobs:
  build-linux:
    name: Build for Linux
    timeout-minutes: 60
    runs-on: ubuntu-22.04

    steps:
      - uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          sudo apt-get update && \
          sudo apt-get install -y \
          build-essential \
          libssl-dev \
          pkg-config \
          libpq5 \
          libpq-dev \
          clang \
          cmake
       
      - name: Install stable
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
      
      - uses: Swatinem/rust-cache@v2
        with:
          key: linux-x86_64
      
      - name: Build Gateway project
        run: cargo build --release --bin ai-gateway
          
      - name: Upload AI Gateway artifact
        uses: actions/upload-artifact@v4
        with:
          name: ai-gateway-linux-x86_64
          path: target/release/ai-gateway
          retention-days: 30

  build-macos:
    name: Build for macOS
    timeout-minutes: 60
    runs-on: macos-latest
    strategy:
      matrix:
        target: [x86_64-apple-darwin, aarch64-apple-darwin]

    steps:
      - uses: actions/checkout@v3
      
      - name: Install dependencies
        run: |
          brew install postgresql sqlite3
       
      - name: Set library paths
        run: |
          echo "LIBRARY_PATH=$(brew --prefix)/lib:$LIBRARY_PATH" >> $GITHUB_ENV
          echo "CPATH=$(brew --prefix)/include:$CPATH" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=$(brew --prefix)/lib/pkgconfig:$PKG_CONFIG_PATH" >> $GITHUB_ENV
       
      - name: Install stable
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: ${{ matrix.target }}
      
      - uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.target }}
      
      - name: Build Gateway project
        env:
          PQ_LIB_STATIC: "1"
        run: cargo build --release --target ${{ matrix.target }} --bin ai-gateway
          
      - name: Upload AI Gateway artifact
        uses: actions/upload-artifact@v4
        with:
          name: ai-gateway-macos-${{ matrix.target == 'aarch64-apple-darwin' && 'aarch64' || 'x86_64' }}
          path: target/${{ matrix.target }}/release/ai-gateway
          retention-days: 30

  create-release:
    name: Create Release
    needs: [build-linux, build-macos]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      
      - name: Prepare release binaries
        run: |
          mkdir -p release
          cp artifacts/ai-gateway-linux-x86_64/ai-gateway release/ai-gateway-linux-x86_64
          cp artifacts/ai-gateway-macos-x86_64/ai-gateway release/ai-gateway-macos-x86_64
          cp artifacts/ai-gateway-macos-aarch64/ai-gateway release/ai-gateway-macos-aarch64
          chmod +x release/*
          ls -lh release/
      
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          name: ${{ endsWith(github.ref_name, '-prerelease') && format('Prerelease {0}', github.ref_name) || format('Release {0}', github.ref_name) }}
          draft: false
          prerelease: ${{ endsWith(github.ref_name, '-prerelease') }}
          generate_release_notes: true
          files: |
            release/ai-gateway-linux-x86_64
            release/ai-gateway-macos-x86_64
            release/ai-gateway-macos-aarch64
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            
